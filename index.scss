@use "sass:math";

////
/// @group index
///
/// These functions can be used as drop-in replacements for some of the HSL
/// based functions included in Sass.
///
/// The implementations use sRGB for input colors (including the whitepoint
/// D65) and converts them to CIELAB by default, but CIELUV, HSL or YUV are
/// also possible.
///
/// CIELAB and CIELUV both try to be close to human perception, so they may
/// give nicer results in many cases than simple RGB/HSL.
///
/// HSLab and HSLuv are variants of CIELAB and CIELUV that scale the chroma
/// instead of clipping. With CIELAB, you know that `lch(40, 50, 10deg, 'lab')`
/// and `lch(70, 50, 90deg, 'lab')` have the same chroma (except when clipping
/// is applied). With HSLab, you know that `lch(40, 50, 10deg, 'hslab')` always
/// has half the chroma of `lch(40, 100, 10deg, 'hslab')`.
///
/// We also provide functions to help with contrast as defined by
/// [WCAG21](https://www.w3.org/TR/WCAG21/#dfn-contrast-ratio)
////

/// @type string
$planifolia-colorspace: 'lab' !default;

@function _perc($x) {
  @return if(unit($x) == '%', math.div($x, 100%), $x);
}

@function _clip-needed($rgb) {
  @for $i from 1 through 3 {
    @if nth($rgb, $i) < 0 {
      @return true;
    } @else if nth($rgb, $i) > 255 {
      @return true;
    }
  }
  @return false;
}

@function _srgb-to-rgb($c) {
  $c: math.div($c, 255);
  @if $c <= 0.04045 {
    $c: math.div($c, 12.92);
  } @else {
    $c: math.pow(math.div($c + 0.055, 1.055), 2.4);
  }
  @return $c * 100;
}

@function _rgb-to-srgb($c) {
  $c: $c * 0.01;
  @if $c <= 0.0031308 {
    $c: $c * 12.92;
  } @else {
    $c: 1.055 * math.pow($c, math.div(1, 2.4)) - 0.055;
  }
  @return $c * 255;
}

@function _to-xyz($color) {
  $r: _srgb-to-rgb(red($color));
  $g: _srgb-to-rgb(green($color));
  $b: _srgb-to-rgb(blue($color));

  $x: 0.4124 * $r + 0.3576 * $g + 0.1805 * $b;
  $y: 0.2126 * $r + 0.7152 * $g + 0.0722 * $b;
  $z: 0.0193 * $r + 0.1192 * $g + 0.9505 * $b;

  @return ($x, $y, $z);
}

@function _from-xyz($xyz) {
  $r: 3.2406 * nth($xyz, 1) - 1.5372 * nth($xyz, 2) - 0.4986 * nth($xyz, 3);
  $g: -0.9689 * nth($xyz, 1) + 1.8758 * nth($xyz, 2) + 0.0415 * nth($xyz, 3);
  $b: 0.0557 * nth($xyz, 1) - 0.204 * nth($xyz, 2) + 1.057 * nth($xyz, 3);

  $r: _rgb-to-srgb($r);
  $g: _rgb-to-srgb($g);
  $b: _rgb-to-srgb($b);

  @return ($r, $g, $b);
}

@function _to-yuv($color) {
  $r: _srgb-to-rgb(red($color));
  $g: _srgb-to-rgb(green($color));
  $b: _srgb-to-rgb(blue($color));

  $y: 0.2126 * $r + 0.7152 * $g + 0.0722 * $b;
  $u: -0.09991 * $r + -0.33609 * $g + 0.436 * $b;
  $v: 0.615 * $r + -0.55861 * $g + -0.05639 * $b;

  @return ($y, $v, -$u);
}

@function _from-yuv($yuv) {
  $y: nth($yuv, 1);
  $v: nth($yuv, 2);
  $u: -1 * nth($yuv, 3);

  $r: _rgb-to-srgb($y + 1.28033 * $v);
  $g: _rgb-to-srgb($y + -0.21482 * $u + -0.38059 * $v);
  $b: _rgb-to-srgb($y + 2.12798 * $u);

  @return ($r, $g, $b);
}

@function _xyz-to-lab-f($t) {
  @if $t > math.div(216, 24389) {
    @return math.pow($t, math.div(1, 3));
  } @else {
    @return math.div(841, 108) * $t + math.div(4, 29);
  }
}

@function _xyz-to-lab($xyz) {
  $white: (95.05, 100, 108.9);

  $x: _xyz-to-lab-f(math.div(nth($xyz, 1), nth($white, 1)));
  $y: _xyz-to-lab-f(math.div(nth($xyz, 2), nth($white, 2)));
  $z: _xyz-to-lab-f(math.div(nth($xyz, 3), nth($white, 3)));

  $l: 116 * $y - 16;
  $a: 500 * ($x - $y);
  $b: 200 * ($y - $z);

  @return ($l, $a, $b);
}

@function _lab-to-xyz-f($t) {
  @if $t > math.div(6, 29) {
    @return math.pow($t, 3);
  } @else {
    @return math.div(108, 841) * ($t - math.div(4, 29));
  }
}

@function _lab-to-xyz($lab) {
  $white: (95.05, 100, 108.9);

  $l: math.div(nth($lab, 1) + 16, 116);

  $x: nth($white, 1) * _lab-to-xyz-f($l + math.div(nth($lab, 2), 500));
  $y: nth($white, 2) * _lab-to-xyz-f($l);
  $z: nth($white, 3) * _lab-to-xyz-f($l - math.div(nth($lab, 3), 200));

  @return ($x, $y, $z);
}

@function _xyz-to-yuuvv($xyz) {
  $a: nth($xyz, 1) + 15 * nth($xyz, 2) + 3 * nth($xyz, 3);
  $uu: if($a == 0, 0, math.div(4 * nth($xyz, 1), $a));
  $vv: if($a == 0, 0, math.div(9 * nth($xyz, 2), $a));
  @return (nth($xyz, 2), $uu, $vv);
}

@function _yuuvv-to-xyz($yuuvv) {
  $y: nth($yuuvv, 1);
  $uu: nth($yuuvv, 2);
  $vv: nth($yuuvv, 3);

  $x: if($vv == 0, 0, math.div($y * (9 * $uu), 4 * $vv));
  $z: if($vv == 0, 0, math.div($y * (12 - 3 * $uu - 20 * $vv), 4 * $vv));

  @return ($x, $y, $z);
}

@function _xyz-to-luv($xyz) {
  $white: _xyz-to-yuuvv((95.05, 100, 108.9));
  $yuuvv: _xyz-to-yuuvv($xyz);

  $y: math.div(nth($yuuvv, 1), nth($white, 1));
  $l: if($y > math.div(216, 24389), 116 * math.pow($y, math.div(1, 3)) - 16, math.div(24389, 27) * $y);

  $u: 13 * $l * (nth($yuuvv, 2) - nth($white, 2));
  $v: 13 * $l * (nth($yuuvv, 3) - nth($white, 3));

  @return ($l, $u, $v);
}

@function _luv-to-xyz($luv) {
  $white: _xyz-to-yuuvv((95.05, 100, 108.9));

  $uu: if(nth($luv, 1) == 0, 0, math.div(nth($luv, 2), 13 * nth($luv, 1)) + nth($white, 2));
  $vv: if(nth($luv, 1) == 0, 0, math.div(nth($luv, 3), 13 * nth($luv, 1)) + nth($white, 3));

  $y: nth($white, 1);
  @if nth($luv, 1) > 8 {
    $y: $y * math.pow(math.div(nth($luv, 1) + 16, 116), 3);
  } @else {
    $y: math.div($y * nth($luv, 1) * 27, 24389);
  }

  @return _yuuvv-to-xyz(($y, $uu, $vv));
}

@function _lab-to-lch($lab) {
  $l: nth($lab, 1);
  $c: math.sqrt(nth($lab, 2) * nth($lab, 2) + nth($lab, 3) * nth($lab, 3));
  $h: 0;
  @if abs(nth($lab, 2)) > 0.0001 or abs(nth($lab, 3)) > 0.0001 {
    $h: math.atan2(nth($lab, 3), nth($lab, 2));
  }

  @return ($l, $c, 0deg + $h);
}

@function _lch-to-lab($lch) {
  $l: nth($lch, 1);
  $a: math.cos(nth($lch, 3)) * nth($lch, 2);
  $b: math.sin(nth($lch, 3)) * nth($lch, 2);

  @return ($l, $a, $b);
}

@function _max-chroma($lightness, $hue, $colorspace) {
  $c-min: 0;
  $c-max: 200;
  $c-tmp: ($c-min + $c-max) * 0.5;

  @while $c-max - $c-min > 1 {
    $rgb: _lch-unclipped($lightness, $c-tmp, $hue, $colorspace);
    @if _clip-needed($rgb) {
      $c-max: $c-tmp;
    } @else {
      $c-min: $c-tmp;
    }
    $c-tmp: ($c-min + $c-max) * 0.5;
  }

  @return $c-tmp;
}

@function _to-lch($color, $colorspace: $planifolia-colorspace) {
  @if $colorspace == 'lab' {
    $xyz: _to-xyz($color);
    $lab: _xyz-to-lab($xyz);
    @return _lab-to-lch($lab);
  } @else if $colorspace == 'hslab' {
    $lch: _to-lch($color, 'lab');
    $max: _max-chroma(nth($lch, 1), nth($lch, 3), 'lab');
    @return (nth($lch, 1), math.div(nth($lch, 2), $max) * 100, nth($lch, 3));
  } @else if $colorspace == 'luv' {
    $xyz: _to-xyz($color);
    $luv: _xyz-to-luv($xyz);
    @return _lab-to-lch($luv);
  } @else if $colorspace == 'hsluv' {
    $lch: _to-lch($color, 'luv');
    $max: _max-chroma(nth($lch, 1), nth($lch, 3), 'luv');
    @return (nth($lch, 1), math.div(nth($lch, 2), $max) * 100, nth($lch, 3));
  } @else if $colorspace == 'hsl' {
    @return (math.div(lightness($color), 1%), math.div(saturation($color), 1%), hue($color));
  } @else if $colorspace == 'yuv' {
    $yuv: _to-yuv($color);
    @return _lab-to-lch($yuv);
  } @else {
    @error 'unknown colorspace: #{$colorspace}';
  }
}

@function _lch-unclipped($lightness, $chroma, $hue, $colorspace) {
  @if $colorspace == 'lab' {
    $lab: _lch-to-lab(($lightness, $chroma, $hue));
    $xyz: _lab-to-xyz($lab);
    @return _from-xyz($xyz);
  } @else if $colorspace == 'hslab' {
    $max: _max-chroma($lightness, $hue, 'lab');
    @return _lch-unclipped($lightness, $chroma * $max * 0.01, $hue, 'lab');
  } @else if $colorspace == 'luv' {
    $luv: _lch-to-lab(($lightness, $chroma, $hue));
    $xyz: _luv-to-xyz($luv);
    @return _from-xyz($xyz);
  } @else if $colorspace == 'hsluv' {
    $max: _max-chroma($lightness, $hue, 'luv');
    @return _lch-unclipped($lightness, $chroma * $max * 0.01, $hue, 'luv');
  } @else if $colorspace == 'hsl' {
    $color: hsl(math.div($hue, 1deg) * 1deg, $chroma * 1%, $lightness * 1%);
    @return (red($color), green($color), blue($color));
  } @else if $colorspace == 'yuv' {
    $yuv: _lch-to-lab(($lightness, $chroma, $hue));
    @return _from-yuv($yuv);
  } @else {
    @error 'unknown colorspace: #{$colorspace}';
  }
}

/// Create a color from lightness, chroma, and hue values.
///
/// Note that the chroma is reduced if the result would otherwise be outside
/// of the sRGB colorspace.
///
/// @param {number} $lightness 0 .. 100
/// @param {number} $chroma 0 .. 100 (some colorspaces may go beyond)
/// @param {angle} $hue
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function lch($lightness, $chroma, $hue, $colorspace: $planifolia-colorspace) {
  $hue: 0deg + $hue;
  $rgb: _lch-unclipped($lightness, $chroma, $hue, $colorspace);

  @if _clip-needed($rgb) {
    $c-min: 0;
    $c-max: $chroma;
    $c-tmp: ($c-min + $c-max) * 0.5;

    @while $c-max - $c-min > 0.01 {
      $rgb: _lch-unclipped($lightness, $c-tmp, $hue, $colorspace);
      @if _clip-needed($rgb) {
        $c-max: $c-tmp;
      } @else {
        $c-min: $c-tmp;
      }
      $c-tmp: ($c-min + $c-max) * 0.5;
    }
  }

  @return rgb(nth($rgb, 1), nth($rgb, 2), nth($rgb, 3));
}

/// Create a color from lightness, chroma, hue, and alpha values.
/// @param {number} $lightness
/// @param {number} $chroma
/// @param {angle} $hue
/// @param {number} $alpha
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function lcha($lightness, $chroma, $hue, $alpha, $colorspace: $planifolia-colorspace) {
  @return rgba(lch($lightness, $chroma, $hue, $colorspace), $alpha);
}

/// Get the lightness component of a color.
/// @param {color} $color
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {number}
@function lightness($color, $colorspace: $planifolia-colorspace) {
  @return nth(_to-lch($color, $colorspace), 1);
}

/// Get the chroma component of a color.
/// @param {color} $color
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {number}
@function chroma($color, $colorspace: $planifolia-colorspace) {
  @return nth(_to-lch($color, $colorspace), 2);
}

/// Get the hue component of a color.
/// @param {color} $color
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {angle}
@function hue($color, $colorspace: $planifolia-colorspace) {
  @return nth(_to-lch($color, $colorspace), 3);
}

/// Increase or decrease one or more components of a color.
/// @param {color} $color
/// @param {number} $lightness [0]
/// @param {number} $chroma [0]
/// @param {angle} $hue [0]
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function adjust-color($color, $lightness: 0, $chroma: 0, $hue: 0, $colorspace: $planifolia-colorspace) {
  $lch: _to-lch($color, $colorspace);

  $l: nth($lch, 1) + $lightness;
  $c: nth($lch, 2) + $chroma;
  $h: nth($lch, 3) + $hue;

  @return lcha($l, $c, $h, alpha($color), $colorspace);
}

/// Change one or more properties of a color.
/// @param {color} $color
/// @param {number} $lightness [null]
/// @param {number} $chroma [null]
/// @param {angle} $hue [null]
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function change-color($color, $lightness: null, $chroma: null, $hue: null, $colorspace: $planifolia-colorspace) {
  $lch: _to-lch($color, $colorspace);

  $l: if($lightness == null, nth($lch, 1), $lightness);
  $c: if($chroma == null, nth($lch, 2), $chroma);
  $h: if($hue == null, nth($lch, 3), $hue);

  @return lcha($l, $c, $h, alpha($color), $colorspace);
}

/// @param {color} $color
/// @param {number} $angle
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function adjust-hue($color, $angle, $colorspace: $planifolia-colorspace) {
  @return adjust-color($color, $hue: $angle, $colorspace: $colorspace);
}

/// @param {color} $color
/// @param {number} $amount
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function lighten($color, $amount, $colorspace: $planifolia-colorspace) {
  @return adjust-color($color, $lightness: $amount, $colorspace: $colorspace);
}

/// @param {color} $color
/// @param {number} $amount
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function darken($color, $amount, $colorspace: $planifolia-colorspace) {
  @return adjust-color($color, $lightness: -$amount, $colorspace: $colorspace);
}

/// @param {color} $color
/// @param {number} $weight
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function tint($color, $weight, $colorspace: $planifolia-colorspace) {
  @return mix(white, $color, $weight, $colorspace);
}

/// @param {color} $color
/// @param {number} $weight
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function shade($color, $weight, $colorspace: $planifolia-colorspace) {
  @return mix(black, $color, $weight, $colorspace);
}

/// @param {color} $color
/// @param {number} $amount
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function saturate($color, $amount, $colorspace: $planifolia-colorspace) {
  @return adjust-color($color, $chroma: $amount, $colorspace: $colorspace);
}

/// @param {color} $color
/// @param {number} $amount
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function desaturate($color, $amount, $colorspace: $planifolia-colorspace) {
  @return adjust-color($color, $chroma: -$amount, $colorspace: $colorspace);
}

/// @param {color} $color
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function complement($color, $colorspace: $planifolia-colorspace) {
  @return adjust-hue($color, math.$pi * 1rad, $colorspace);
}

/// @param {color} $color
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function grayscale($color, $colorspace: $planifolia-colorspace) {
  @return change-color($color, $chroma: 0, $colorspace: $colorspace);
}

/// Get the euclidean distance between two colors.
/// @param {color} $color1
/// @param {color} $color2
/// @return {number}
@function color-distance($color1, $color2) {
  $lab1: _xyz-to-lab(_to-xyz($color1));
  $lab2: _xyz-to-lab(_to-xyz($color2));

  $x1: nth($lab1, 1) - nth($lab2, 1);
  $x2: nth($lab1, 2) - nth($lab2, 2);
  $x3: nth($lab1, 3) - nth($lab2, 3);

  @return math.sqrt($x1 * $x1 + $x2 * $x2 + $x3 * $x3);
}

@function _lch-mix($lch1, $lch2, $weight) {
  $w: _perc($weight);

  $l: nth($lch1, 1) * $w + nth($lch2, 1) * (1 - $w);
  $c: nth($lch1, 2) * $w + nth($lch2, 2) * (1 - $w);

  $w1: $w * nth($lch1, 2);
  $w2: (1 - $w) * nth($lch2, 2);

  @if ($w1 == 0 and $w2 == 0) {
    $w1: 0.5;
    $w2: 0.5;
  }

  $h1: nth($lch1, 3);
  $h2: nth($lch2, 3);

  @while abs($h2 - $h1) > 180deg {
    $h1: $h1 + if($h1 < $h2, 360deg, -360deg);
  }

  $h: math.div($h1 * $w1 + $h2 * $w2, $w1 + $w2);

  @return ($l, $c, $h);
}

/// @param {color} $color1
/// @param {color} $color2
/// @param {number} $weight [50%]
/// @param {string} $colorspace ['lab'] one of 'lab', 'luv', 'hsl', 'yuv', 'hslab', 'hsluv'
/// @return {color}
@function mix($color1, $color2, $weight: 50%, $colorspace: $planifolia-colorspace) {
  $lch1: _to-lch($color1, $colorspace);
  $lch2: _to-lch($color2, $colorspace);

  $lch: _lch-mix($lch1, $lch2, $weight);

  @return lch(nth($lch, 1), nth($lch, 2), nth($lch, 3), $colorspace);
}

/// @type color
$planifolia-contrast-dark-default: black !default;

/// @type color
$planifolia-contrast-light-default: white !default;

$planifolia-srgb-lut: 0, 0.0003035269835488375, 0.000607053967097675, 0.0009105809506465125, 0.00121410793419535, 0.0015176349177441874, 0.001821161901293025, 0.0021246888848418626, 0.0024282158683907, 0.0027317428519395373, 0.003035269835488375, 0.003346535763899161, 0.003676507324047436, 0.004024717018496307, 0.004391442037410293, 0.004776953480693729, 0.005181516702338386, 0.005605391624202723, 0.006048833022857054, 0.006512090792594475, 0.006995410187265387, 0.007499032043226175, 0.008023192985384994, 0.008568125618069307, 0.009134058702220787, 0.00972121732023785, 0.010329823029626936, 0.010960094006488246, 0.011612245179743885, 0.012286488356915872, 0.012983032342173012, 0.013702083047289686, 0.014443843596092545, 0.01520851442291271, 0.01599629336550963, 0.016807375752887384, 0.017641954488384078, 0.018500220128379697, 0.019382360956935723, 0.0202885630566524, 0.021219010376003555, 0.02217388479338738, 0.02315336617811041, 0.024157632448504756, 0.02518685962736163, 0.026241221894849898, 0.027320891639074894, 0.028426039504420793, 0.0295568344378088, 0.030713443732993635, 0.03189603307301153, 0.033104766570885055, 0.03433980680868217, 0.03560131487502034, 0.03688945040110004, 0.0382043715953465, 0.03954623527673284, 0.04091519690685319, 0.042311410620809675, 0.043735029256973465, 0.04518620438567554, 0.046665086336880095, 0.04817182422688942, 0.04970656598412723, 0.05126945837404324, 0.052860647023180246, 0.05448027644244237, 0.05612849004960009, 0.05780543019106723, 0.0595112381629812, 0.06124605423161761, 0.06301001765316767, 0.06480326669290577, 0.06662593864377289, 0.06847816984440017, 0.07036009569659588, 0.07227185068231748, 0.07421356838014963, 0.07618538148130785, 0.07818742180518633, 0.08021982031446832, 0.0822827071298148, 0.08437621154414882, 0.08650046203654976, 0.08865558628577294, 0.09084171118340768, 0.09305896284668745, 0.0953074666309647, 0.09758734714186246, 0.09989872824711389, 0.10224173308810132, 0.10461648409110419, 0.10702310297826761, 0.10946171077829933, 0.1119324278369056, 0.11443537382697373, 0.11697066775851084, 0.11953842798834562, 0.12213877222960187, 0.12477181756095049, 0.12743768043564743, 0.1301364766903643, 0.13286832155381798, 0.13563332965520566, 0.13843161503245183, 0.14126329114027164, 0.14412847085805777, 0.14702726649759498, 0.14995978981060856, 0.15292615199615017, 0.1559264637078274, 0.1589608350608804, 0.162029375639111, 0.1651321945016676, 0.16826940018969075, 0.1714411007328226, 0.17464740365558504, 0.17788841598362912, 0.18116424424986022, 0.184474994500441, 0.18782077230067787, 0.19120168274079138, 0.1946178304415758, 0.19806931955994886, 0.20155625379439707, 0.20507873639031693, 0.20863687014525575, 0.21223075741405523, 0.21586050011389926, 0.2195261997292692, 0.2232279573168085, 0.22696587351009836, 0.23074004852434915, 0.23455058216100522, 0.238397573812271, 0.24228112246555486, 0.24620132670783548, 0.25015828472995344, 0.25415209433082675, 0.2581828529215958, 0.26225065752969623, 0.26635560480286247, 0.2704977910130658, 0.27467731206038465, 0.2788942634768104, 0.2831487404299921, 0.2874408377269175, 0.29177064981753587, 0.2961382707983211, 0.3005437944157765, 0.3049873140698863, 0.30946892281750854, 0.31398871337571754, 0.31854677812509186, 0.32314320911295075, 0.3277780980565422, 0.33245153634617935, 0.33716361504833037, 0.3419144249086609, 0.3467040563550296, 0.35153259950043936, 0.3564001441459435, 0.3613067797835095, 0.3662525955988395, 0.3712376804741491, 0.3762621229909065, 0.38132601143253014, 0.386429433787049, 0.39157247774972326, 0.39675523072562685, 0.4019777798321958, 0.4072402119017367, 0.41254261348390375, 0.4178850708481375, 0.4232676699860717, 0.4286904966139066, 0.43415363617474895, 0.4396571738409188, 0.44520119451622786, 0.45078578283822346, 0.45641102318040466, 0.4620769996544071, 0.467783796112159, 0.47353149614800955, 0.4793201831008268, 0.4851499400560704, 0.4910208498478356, 0.4969329950608704, 0.5028864580325687, 0.5088813208549338, 0.5149176653765214, 0.5209955732043543, 0.5271151257058131, 0.5332764040105052, 0.5394794890121072, 0.5457244613701866, 0.5520114015120001, 0.5583403896342679, 0.5647115057049292, 0.5711248294648731, 0.5775804404296506, 0.5840784178911641, 0.5906188409193369, 0.5972017883637634, 0.6038273388553378, 0.6104955708078648, 0.6172065624196511, 0.6239603916750761, 0.6307571363461468, 0.6375968739940326, 0.6444796819705821, 0.6514056374198242, 0.6583748172794485, 0.665387298282272, 0.6724431569576875, 0.6795424696330938, 0.6866853124353135, 0.6938717612919899, 0.7011018919329731, 0.7083757798916868, 0.7156935005064807, 0.7230551289219693, 0.7304607400903537, 0.7379104087727308, 0.7454042095403874, 0.7529422167760779, 0.7605245046752924, 0.768151147247507, 0.7758222183174236, 0.7835377915261935, 0.7912979403326302, 0.799102738014409, 0.8069522576692516, 0.8148465722161012, 0.8227857543962835, 0.8307698767746546, 0.83879901174074, 0.846873231509858, 0.8549926081242338, 0.8631572134541023, 0.8713671191987972, 0.8796223968878317, 0.8879231178819663, 0.8962693533742664, 0.9046611743911496, 0.9130986517934192, 0.9215818562772946, 0.9301108583754237, 0.938685728457888, 0.9473065367331999, 0.9559733532492861, 0.9646862478944651, 0.9734452903984125, 0.9822505503331171, 0.9911020971138298, 1.0;

@function _threshold($threshold) {
  @if ($threshold == 'AA' or $threshold == 'AAALG') {
    @return 4.5;
  } @else if ($threshold == 'AALG') {
    @return 3;
  } @else if ($threshold == 'AAA') {
    @return 7;
  } @else {
    @return $threshold;
  }
}

// FIXME: namespace name
@function alpha-blend($fg, $bg: white) {
  $a1: alpha($bg);
  $a2: alpha($fg);

  @if ($a1 == 0) {
    @if ($a2 == 0) {
      @return $fg;
    }
  }

  $a: $a2 + (1 - $a2) * $a1;
  $r: math.div($a2 * red($fg) + (1 - $a2) * $a1 * red($bg), $a);
  $g: math.div($a2 * green($fg) + (1 - $a2) * $a1 * green($bg), $a);
  $b: math.div($a2 * blue($fg) + (1 - $a2) * $a1 * blue($bg), $a);

  @return rgba($r, $g, $b, $a);
}

// FIXME: namespace name
@function luma($color) {
  $r: nth($planifolia-srgb-lut, red($color) + 1);
  $g: nth($planifolia-srgb-lut, green($color) + 1);
  $b: nth($planifolia-srgb-lut, blue($color) + 1);
  @return 0.2126 * $r + 0.7152 * $g + 0.0722 * $b;
}

@function _contrast($fg, $bg) {
  $lbg: luma($bg);
  $lfg: luma(alpha-blend($fg, $bg));
  @return math.div(max($lbg, $lfg) + 0.05, min($lbg, $lfg) + 0.05);
}

/// Calculate the minimum possible contrast between two colors.
///
/// Note that the "minimum" part of this is only relevant if `$bg` is
/// transparent. In that case, a backdrop color is chosen so that the resulting
/// contrast is minimal.
///
/// @param {color} $fg foreground color
/// @param {color} $bg background color
/// @return {number} between 1 and 21
@function contrast-min($fg, $bg) {
  // optimize for the common case
  @if alpha($bg) == 1 {
    @return _contrast($fg, $bg);
  } @else {
    $bg-black: alpha-blend($bg, black);
    $bg-white: alpha-blend($bg, white);
    $lfg: luma($fg);

    @if luma($bg-white) < $lfg {
      @return _contrast($fg, $bg-white);
    } @else if luma($bg-black) > $lfg {
      @return _contrast($fg, $bg-black);
    } @else {
      @return 1;
    }
  }
}

/// Calculate the contrast between two colors.
///
/// This function is different from `contrast-min` by not caring about the
/// order of inputs. This is achieved by calculating the average of both
/// possible results of `contrast-min`.
///
/// @param {color} $color1
/// @param {color} $color2
/// @return {number} between 1 and 21
/// @see contrast-min
@function contrast($color1, $color2) {
  // NOTE: optimized for the common case
  @if alpha($color1) + alpha($color2) == 2 {
    @return _contrast($color1, $color2);
  } @else {
    $c1: contrast-min($color1, $color2);
    $c2: contrast-min($color2, $color1);
    @return ($c1 + $c2) * 0.5;
  }
}

/// Pick the higher contrast option for a given base color.
///
/// @param {color} $base the base color to compare to
/// @param {color} $color1 [$planifolia-contrast-dark-default] first option
/// @param {color} $color2 [$planifolia-contrast-light-default] second option
/// @return {color} either `$color1` or `$color2`
@function contrast-color(
  $base,
  $color1: $planifolia-contrast-dark-default,
  $color2: $planifolia-contrast-light-default
) {
  @if contrast($color1, $base) >= contrast($color2, $base) {
    @return $color1;
  } @else {
    @return $color2;
  }
}

/// Mix color with black or white to increase contrast for a given base color.
///
/// @param {color} $base
/// @param {color} $color
/// @param {number} $threshold [4.5]
///    (can also be 'AA', 'AALG', 'AAA', or 'AAALG')
/// @return {color}
@function contrast-stretch($base, $color, $threshold: 4.5) {
  $threshold: _threshold($threshold);
  $lower: $color;
  $upper: if(luma($base) < 0.18, white, black);

  @if contrast($base, $lower) >= $threshold {
    @return $lower;
  }
  @if contrast($base, $upper) <= $threshold {
    @return $upper;
  }

  // NOTE: This is not a usual binary search. It is possible that the contrast
  // first decreases for a while when going from $lower to $upper.  However, we
  // checked that it starts below $contrast, so the algorithm still works.
  @for $i from 0 to 10 {
    $tmp: mix($lower, $upper);

    @if contrast($base, $tmp) < $threshold {
      $lower: $tmp;
    } @else {
      $upper: $tmp;
    }
  }

  @return $upper;
}

/// Warn if the contrast is below a threshold.
///
/// @param {color} $base
/// @param {color} $color
/// @param {number} $threshold [4.5]
///    (can also be 'AA', 'AALG', 'AAA', or 'AAALG')
/// @return {color} unchanged $color
@function contrast-check($base, $color, $threshold: 4.5) {
  $threshold: _threshold($threshold);
  $contrast: contrast($base, $color);
  @if $contrast < $threshold {
    @warn 'contrast #{$contrast} between #{$base} and #{$color} too low!';
  }
  @return $color;
}
