////
/// This implements some color functions based on the L*a*b* colorspace.
///
/// Many functions in this module use the LCh colorspace which is to L*a*b*
/// what HSL is to RGB. However, LCh has two advantages over HSL: It is closer
/// to human perception (though not as close as CIECAM02) and it is
/// perceptually uniform.
///
/// The provided functions can be used as drop-in replacements for some of the
/// HSL based functions included in Sass.
///
/// This implementation uses sRGB for input colors (including the whitepoint
/// D65) and converts them to CIELCh.
///
/// @group Lab
////

@function _perc($x) {
  @return if(unit($x) == '%', $x / 100%, $x);
}

@function _srgb-to-rgb($c) {
  $c: $c / 255;
  @if $c <= .04045 {
    $c: $c / 12.92;
  } @else {
    $c: pow(($c + .055) / 1.055, 2.4);
  }
  @return $c * 100;
}

@function _rgb-to-srgb($c) {
  $c: $c / 100;
  @if $c <= .0031308 {
    $c: $c * 12.92;
  } @else {
    $c: 1.055 * pow($c, 1 / 2.4) - .055;
  }
  @return $c * 255;
}

@function _to-xyz($color) {
  $r: _srgb-to-rgb(red($color));
  $g: _srgb-to-rgb(green($color));
  $b: _srgb-to-rgb(blue($color));

  $x: .4124 * $r + .3576 * $g + .1805 * $b;
  $y: .2126 * $r + .7152 * $g + .0722 * $b;
  $z: .0193 * $r + .1192 * $g + .9505 * $b;

  @return ($x, $y, $z);
}

@function _from-xyz($xyz) {
  $r: 3.2406 * nth($xyz, 1) - 1.5372 * nth($xyz, 2) - .4986 * nth($xyz, 3);
  $g: -.9689 * nth($xyz, 1) + 1.8758 * nth($xyz, 2) + .0415 * nth($xyz, 3);
  $b: .0557 * nth($xyz, 1) - .204 * nth($xyz, 2) + 1.057 * nth($xyz, 3);

  $r: _rgb-to-srgb($r);
  $g: _rgb-to-srgb($g);
  $b: _rgb-to-srgb($b);

  @return rgb($r, $g, $b);
}

@function _xyz-to-lab-f($t) {
  @if $t > 216 / 24389 {
    @return pow($t, 1/3);
  } @else {
    @return 841 / 108 * $t + 4 / 29;
  }
}

@function _xyz-to-lab($xyz) {
  $white: (95.05, 100, 108.9);

  $x: _xyz-to-lab-f(nth($xyz, 1) / nth($white, 1));
  $y: _xyz-to-lab-f(nth($xyz, 2) / nth($white, 2));
  $z: _xyz-to-lab-f(nth($xyz, 3) / nth($white, 3));

  $l: 116 * $y - 16;
  $a: 500 * ($x - $y);
  $b: 200 * ($y - $z);

  @return ($l, $a, $b);
}

@function _lab-to-xyz-f($t) {
  @if $t > 6 / 29 {
    @return pow($t, 3);
  } @else {
    @return 108 / 841 * ($t - 4 / 29);
  }
}

@function _lab-to-xyz($lab) {
  $white: (95.05, 100, 108.9);

  $l: (nth($lab, 1) + 16) / 116;

  $x: nth($white, 1) * _lab-to-xyz-f($l + nth($lab, 2) / 500);
  $y: nth($white, 2) * _lab-to-xyz-f($l);
  $z: nth($white, 3) * _lab-to-xyz-f($l - nth($lab, 3) / 200);

  @return ($x, $y, $z);
}

@function _lab-to-lch($lab) {
  $l: nth($lab, 1);
  $c: sqrt(nth($lab, 2) * nth($lab, 2) + nth($lab, 3) * nth($lab, 3));
  $h: 0;
  @if abs(nth($lab, 2)) > .0001 or abs(nth($lab, 3)) > .0001 {
    $h: atan2(nth($lab, 3), nth($lab, 2));
  }

  @return ($l, $c, $h);
}

@function _lch-to-lab($lch) {
  $l: nth($lch, 1);
  $a: cos(nth($lch, 3)) * nth($lch, 2);
  $b: sin(nth($lch, 3)) * nth($lch, 2);

  @return ($l, $a, $b);
}

/// @require pow
/// @require sqrt
/// @require atan2
@function _to-lch($color) {
  @return _lab-to-lch(_xyz-to-lab(_to-xyz($color)));
}

/// Create a color from lightness, chroma, and hue values.
///
/// Note that the result may be clipped if it lies outside of the sRGB
/// colorspace.
///
/// @param {number} $lightness 0 .. 100
/// @param {number} $chroma 0 .. ca. 140
/// @param {number} $hue in unitless radian
/// @return {color}
///
/// @require pow
/// @require sin
/// @require cos
@function lch($lightness, $chroma, $hue) {
  @return _from-xyz(_lab-to-xyz(_lch-to-lab(($lightness, $chroma, $hue))));
}

/// Create a color from lightness, chroma, hue, and alpha values.
/// @param {number} $lightness
/// @param {number} $chroma
/// @param {number} $hue
/// @param {number} $alpha
/// @return {color}
@function lcha($lightness, $chroma, $hue, $alpha) {
  @return rgba(lch($lightness, $chroma, $hue), $alpha);
}

/// Get the lightness component of a color.
/// @param {color} $color
/// @return {number}
@function lab-lightness($color) {
  @return nth(_to-lch($color), 1);
}

/// Get the chroma component of a color.
/// @param {color} $color
/// @return {number}
@function lab-chroma($color) {
  @return nth(_to-lch($color), 2);
}

/// Get the hue component of a color.
/// @param {color} $color
/// @return {number}
@function lab-hue($color) {
  @return nth(_to-lch($color), 3);
}

/// Increase or decrease one or more components of a color.
/// @param {color} $color
/// @param {number} $lightness [0]
/// @param {number} $chroma [0]
/// @param {number} $hue [0]
/// @return {color}
@function lab-adjust-color($color, $lightness: 0, $chroma: 0, $hue: 0) {
  $lch: _to-lch($color);

  $l: nth($lch, 1) + $lightness;
  $c: nth($lch, 2) + $chroma;
  $h: nth($lch, 3) + $hue;

  @return lch($l, $c, $h);
}

/// Change one or more properties of a color.
/// @param {color} $color
/// @param {number} $lightness [null]
/// @param {number} $chroma [null]
/// @param {number} $hue [null]
/// @return {color}
@function lab-change-color($color, $lightness: null, $chroma: null, $hue: null) {
  $lch: _to-lch($color);

  $l: if($lightness == null, nth($lch, 1), $lightness);
  $c: if($chroma == null, nth($lch, 2), $chroma);
  $h: if($hue == null, nth($lch, 3), $hue);

  @return lch($l, $c, $h);
}

/// @param {color} $color
/// @param {number} $degrees
/// @return {color}
@function lab-adjust-hue($color, $degrees) {
  @return lab-adjust-color($color, $hue: $degrees);
}

/// @param {color} $color
/// @param {number} $amount
/// @return {color}
@function lab-lighten($color, $amount) {
  @return lab-adjust-color($color, $lightness: $amount);
}

/// @param {color} $color
/// @param {number} $amount
/// @return {color}
@function lab-darken($color, $amount) {
  @return lab-adjust-color($color, $lightness: -$amount);
}

/// @param {color} $color
/// @param {number} $weight
/// @return {color}
@function lab-tint($color, $weight) {
  @return lab-mix(white, $color, $weight);
}

/// @param {color} $color
/// @param {number} $weight
/// @return {color}
@function lab-shade($color, $weight) {
  @return lab-mix(black, $color, $weight);
}

/// @param {color} $color
/// @param {number} $amount
/// @return {color}
@function lab-saturate($color, $amount) {
  @return lab-adjust-color($color, $chroma: $amount);
}

/// @param {color} $color
/// @param {number} $amount
/// @return {color}
@function lab-desaturate($color, $amount) {
  @return lab-adjust-color($color, $chroma: -$amount);
}

/// @param {color} $color
/// @return {color}
/// @require pi
@function lab-complement($color) {
  @return lab-adjust-hue($color, pi());
}

/// @param {color} $color
/// @return {color}
/// @require pi
@function lab-grayscale($color) {
  @return lab-change-color($color, $chroma: 0);
}

/// Get the euclidean distance between two colors.
/// @param {color} $color1
/// @param {color} $color2
/// @return {number}
/// @require _to-lch
@function lab-distance($color1, $color2) {
  $lab1: _xyz-to-lab(_to-xyz($color1));
  $lab2: _xyz-to-lab(_to-xyz($color2));

  $x1: nth($lab1, 1) - nth($lab2, 1);
  $x2: nth($lab1, 2) - nth($lab2, 2);
  $x3: nth($lab1, 3) - nth($lab2, 3);

  @return sqrt($x1 * $x1 + $x2 * $x2 + $x3 * $x3);
}

@function _lch-mix($lch1, $lch2, $weight) {
  $w: _perc($weight);

  $l: nth($lch1, 1) * $w + nth($lch2, 1) * (1 - $w);
  $c: nth($lch1, 2) * $w + nth($lch2, 2) * (1 - $w);

  $w1: $w * nth($lch1, 2);
  $w2: (1 - $w) * nth($lch2, 2);

  @if ($w1 == 0 and $w2 == 0) {
    $w1: .5;
    $w2: .5;
  }

  $h1: nth($lch1, 3);
  $h2: nth($lch2, 3);

  @while abs($h2 - $h1) > pi() {
    $h1: $h1 + if($h1 < $h2, 2, -2) * pi();
  }

  $h: ($h1 * $w1 + $h2 * $w2) / ($w1 + $w2);

  @return ($l, $c, $h);
}

/// @param {color} $color1
/// @param {color} $color2
/// @param {number} $weight [50%]
/// @return {color}
@function lab-mix($color1, $color2, $weight: 50%) {
  $lch1: _to-lch($color1);
  $lch2: _to-lch($color2);

  $lch: _lch-mix($lch1, $lch2, $weight);

  @return lch(nth($lch, 1), nth($lch, 2), nth($lch, 3));
}
