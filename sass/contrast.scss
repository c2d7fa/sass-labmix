@import "math";

@function -contrast-srgb($channel) {
    $x: $channel / 255;
    @if $x <= 0.03928 {
        @return $x / 12.92;
    } @else {
        @return pow(($x + 0.055) / 1.055, 2.4);
    }
}

/* Luma according to WCAG20 */
@function luma($color) {
    $r: -contrast-srgb(red($color));
    $g: -contrast-srgb(green($color));
    $b: -contrast-srgb(blue($color));
    @return 0.2126 * $r + 0.7152 * $g + 0.0722 * $b;
}

@function contrast($bg, $fg) {
    $lbg: luma($bg);
    $abg: alpha($bg);
    $lfg: luma($fg);
    $afg: alpha($fg);

    // Transparency is interpreted with its worst case.
    // This calculation is slightly different for forground and
    // background colors.
    @if $lbg > $lfg {
        $lbg: max($lbg * $abg, $lfg);
    } @else {
        $lbg: min($lbg * $abg + (1 - $abg), $lfg);
    }
    $lfg: $lfg * $afg + $lbg * (1 - $afg);

    @return (max($lbg, $lfg) + 0.05) / (min($lbg, $lfg) + 0.05);
}

@function contrast-color($base, $c1: black, $c2: white, $bg: false) {
    @if $bg {
        @if contrast($c1, $base) >= contrast($c2, $base) {
            @return $c1;
        } @else {
            @return $c2;
        }
    } @else {
        @if contrast($base, $c1) > contrast($base, $c2) {
            @return $c1;
        } @else {
            @return $c2;
        }
    }
}
