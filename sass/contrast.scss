////
/// Functions to help with contrast as defined by
/// [WCAG20](https://www.w3.org/TR/WCAG20/#contrast-ratiodef)
///
/// This module requires a function called `pow()`. You should make sure that
/// one is available, e.g. by including the math module from this project.
///
/// @group contrast
////

/// @type color
$planifolia-contrast-dark-default: black !default;
/// @type color
$planifolia-contrast-light-default: white !default;

@function _planifolia-srgb($channel) {
  $x: $channel / 255;
  @if $x <= .03928 {
    @return $x / 12.92;
  } @else {
    @return pow(($x + .055) / 1.055, 2.4);
  }
}

/// @param {color} $fg foreground color
/// @param {color} $bg [white] background color
/// @return {color} blended color
@function alpha-blend($fg, $bg: white) {
  $a1: alpha($bg);
  $a2: alpha($fg);

  @if ($a1 == 0) {
    @if ($a2 == 0) {
      @return $fg;
    }
  }

  $a: $a2 + (1 - $a2) * $a1;
  $r: ($a2 * red($fg) + (1 - $a2) * $a1 * red($bg)) / $a;
  $g: ($a2 * green($fg) + (1 - $a2) * $a1 * green($bg)) / $a;
  $b: ($a2 * blue($fg) + (1 - $a2) * $a1 * blue($bg)) / $a;

  @return rgba($r, $g, $b, $a);
}

/// Calculate the perceptual brightness of a color.
///
/// @param {color} $color
/// @return {number} normalized to [0, 1]
@function luma($color) {
  $r: _planifolia-srgb(red($color));
  $g: _planifolia-srgb(green($color));
  $b: _planifolia-srgb(blue($color));
  @return .2126 * $r + .7152 * $g + .0722 * $b;
}

/// Calculate the contrast between two colors.
///
/// Note that the foreground/background distinction is only relevant when
/// dealing with semi-transparent colors. In that case, transparency is
/// interpreted with the worst case.
///
/// @param {color} $bg background color
/// @param {color} $fg foreground color
/// @return {number} between 1 and 21
@function contrast($bg, $fg) {
  $lbg: luma($bg);
  $abg: alpha($bg);
  $lfg: luma($fg);
  $afg: alpha($fg);

  @if $lbg > $lfg {
    $lbg: max($lbg * $abg, $lfg);
  } @else {
    $lbg: min($lbg * $abg + (1 - $abg), $lfg);
  }
  $lfg: $lfg * $afg + $lbg * (1 - $afg);

  @return (max($lbg, $lfg) + .05) / (min($lbg, $lfg) + .05);
}

/// Pick the higher contrast option for a given base color.
///
/// @param {color} $base the base color to compare to
/// @param {color} $c1 [$planifolia-contrast-dark-default] first option
/// @param {color} $c2 [$planifolia-contrast-light-default] second option
/// @param {boolean} $bg [false] if this is true, $base is interpreted as a
///   foreground color when calculating the contrast.
/// @return {color} either $c1 or $c2
@function contrast-color(
  $base,
  $c1: $planifolia-contrast-dark-default,
  $c2: $planifolia-contrast-light-default,
  $bg: false
) {
  @if $bg {
    @if contrast($c1, $base) >= contrast($c2, $base) {
      @return $c1;
    } @else {
      @return $c2;
    }
  } @else {
    @if contrast($base, $c1) > contrast($base, $c2) {
      @return $c1;
    } @else {
      @return $c2;
    }
  }
}

/// Warn if the contrast is below a threshold
///
/// @param {color} $color1 background color
/// @param {color} $color2 foreground color
/// @param {number} $threshold [4.5]
@function contrast-check($color1, $color2, $threshold: 4.5) {
  @if contrast($color1, $color2) < $threshold {
    @warn 'contrast #{$contrast} between #{$color1} and #{$color2} too low!';
  }
}
